{
	"name": "DF_Youtubers",
	"properties": {
		"folder": {
			"name": "DF_Youtubers"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "YoutubeDB",
						"type": "DatasetReference"
					},
					"name": "OrigemYoutubers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "YoutubeDB",
						"type": "DatasetReference"
					},
					"name": "YoutubesLoad"
				}
			],
			"transformations": [
				{
					"name": "TransformaTipoCol"
				},
				{
					"name": "RenomeiaPortugues"
				},
				{
					"name": "FiltroAno2014"
				}
			],
			"scriptLines": [
				"source(output(",
				"          rank as string,",
				"          Youtuber as string,",
				"          subscribers as string,",
				"          {video views} as string,",
				"          {video count} as string,",
				"          category as string,",
				"          started as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrigemYoutubers",
				"OrigemYoutubers cast(output(",
				"          rank as integer '000',",
				"          subscribers as integer '###,###',",
				"          {video views} as long '###,###,###,###',",
				"          {video count} as integer '###,###',",
				"          started as integer '000'",
				"     ),",
				"     errors: true) ~> TransformaTipoCol",
				"TransformaTipoCol select(mapColumn(",
				"          Ranking = rank,",
				"          Youtuber,",
				"          Inscritos = subscribers,",
				"          {Visualizações} = {video views},",
				"          Videos = {video count},",
				"          Categoria = category,",
				"          AnoDeCriacao = started",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenomeiaPortugues",
				"RenomeiaPortugues filter(AnoDeCriacao < 2014) ~> FiltroAno2014",
				"FiltroAno2014 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          rank as string,",
				"          Youtuber as string,",
				"          subscribers as string,",
				"          {video views} as string,",
				"          {video count} as string,",
				"          category as string,",
				"          started as string",
				"     ),",
				"     partitionFileNames:['YoutubersDB_Final'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> YoutubesLoad"
			]
		}
	}
}